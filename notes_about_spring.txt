За создание и управление объектов отвечает Spring container - контейнер где нах-ся объекты и откуда мы их будем получать.
Контейнер будет читать наш конфиг файл.

Основные ф-ии:IoC создание и упр-е объектами, аутсорс спрингу
инверсия управления такой архитектурный подход когда сущность не сама созд свои зав-ти а когда этой сущ-сти зав-ти посталяются извне!
DI внедрение зависимостей dependency injection - аутсорсинг добавления/внедрения зависимостей, делает объекты приложения слабо зависимыми
Способы внедрения зав-ти: 1- с помощью констр-ра (constructor-arg, ref -ссылка на bean id),сеттеров и @Autowiring

<!--        <constructor-arg ref="myPet"/>-->
<property name="pet" ref="myPet"/>  для сетера

<property name="surname" value="${person.surname}"/> 

  <bean
            id="myPet"
            class="ru.durdyev.springcourse.Cat"
            init-method="unit"
            destroy-method="destroy"
            scope="singleton">
    </bean>

3 способа конфиг- и спринг  контейнера: xml(устаревший), аннотации+xml,  java код
id -идентификатор бина
class -полное имя класса
Bean - объект который созд-ся и упрв-ся spting conteiner

ApplicationContext представляет собой Spring Container. Поэтому для получения бина нам нужно создать спринг контейнер

Scope(область видимости) определяет: Жизненный цикл бина, возможное кол-во создав бинов.

Singleton(одиночка)  паттерн  при котором создается один объект класса. получаем ссылку на один объект класса 
(по умолчанию, создается  сразу при обращении к спринг контейнеру)
Prototype -scope который каждый раз создает новый объект при вызове getbean (создается только по запросу) 
request session global session

<context:property-placeholder location="classpath:myApp.properties"/>    для property file



Unit метод запускается в ходе инициализации бина(инициа-я ресурсов, обращение к внешним файлам, запуск БД)
Destroy  метод зап-ся в ходе уничтожения бина (очищение ресурсов закрытие доступа к БД,закр-е потоков IO)зав-е приложения
У данных методов не должно быть параметров, обычно возвращают void, модификатор мб любой, могут наз-ся как угодно!
для каждого бина prototype будет выз-ся unit но destroy вызыв-ся не будет, необ-мо сам-то  писать код для закрытия-освобождения ресурсов


Фабричный метод объекты создаются не напрямую через new,а через вызов фабр метода 

Аннотации- спец тип комментариев(метки,метаданные) с помощью которых можно передавать инструкции для java компилятора(@override)
для анализаторов исходного кода. аннотации сокращает код
метаданные которые мб исп-ны либо java приложением либо другими прил и фреймворками

конфиг-я с помощью аннотаций
(сканирование пакета)      <context:component-scan base-package="ru.durdyev.springcourse"/>  
(поиск классов с аннотацией @Component,при наличии @Autowired поиск подход-го  по типу бина) 
@Component("catBean")  указываем аннотацию и его id,  получаем bean с помощью  id   connext.getBean("catBean",  Cat.class)
Если не указываем bean id, то он по дефолту он получается из и мена класса, заменяя заглавную букву на прописную

@Autowired исп-ся для внедрения зав-тей с помощью аннотаций, можем использовать для констр-ра, сеттера и поля

@Qualifier исп-ся когда при исп-и @Autowired подходящих по типу бинов больше одного(предотвращаем искл-е)
если используем для конст-ра то пишем в параметрах
 @Autowired
 public Person(@Qualifier("dog") Pet pet)

@Value исп-ся для внедрения строк и других значений, в этом случае в сеттерах нет необ-ти как это  было при конф-и XML файла

@Scope

методы к аннотациям не должны принимать какие либо аргументы
@PostConstruct
@PreDestroy

Конфигурация spring container с помощью  java-код:
1 option
@Configuration       означает что  класс явл-ся конфигурацией
@ComponentScan("")   мы здесь показываем какой пакет нужно сканировать на наличие бинов и разных аннотаций
public class MyConfig()

При исп-и конфиг-и с помощью java кода Spring Container будет представлен классом AnnotationConfigApplicationContext(указываем класс);

2option описываем бины в самом классе myConfig 

Данный способ не исп-ет сканирование пакета и поиск бинов.Здесь бины опис-ся в конфиг классе;
Данный способ не исп-ет аннот. @Autowired  Здесь зависимости прописываются вручную;
Название метода -bean id;
аннотация @Bean перехватывает все обращения к бину и регилирует его создание в зав-ти  от scope бин

Аннотация @PropertySource указывает на файл откуда мы можем взять значения для полей

REST паттерн проектирования web приложений/ описывает то как посредством HTTP клиент должен взаим-ть с сервером(get post patch delete data)
пол-е доб-е изм-е удал-е
CRUD - 4 баз ф-и при работе с БД

Паттерн DAO(Data Access Object) паттерн проек-я когда отд класс занимается взаимодействием с БД
